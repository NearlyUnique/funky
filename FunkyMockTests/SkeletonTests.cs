using FunkyMock;
using FunkyMock.External;
using Microsoft.CodeAnalysis.Testing;
using Xunit;
using VerifyCS = FunkyMockTests.Verifiers.CSharpSourceGeneratorVerifier<FunkyMock.FunkyGenerator>;

namespace FunkyMockTests;

[Collection("AllowTesting-IndentedStringBuilder.NewLine")]
public class FunkyMockTests
{
    private readonly string _attributeSrc = $@"// <auto-generated/>
#nullable enable
namespace FunkyMock;
[global::System.CodeDom.Compiler.GeneratedCodeAttribute(""FunkyMock"", ""{typeof(FunkyGenerator).Assembly.GetName().Version}"")]
[global::System.AttributeUsageAttribute(global::System.AttributeTargets.Class, AllowMultiple = false, Inherited = false)]
internal sealed class FunkyAttribute : global::System.Attribute
{{
    public FunkyAttribute(global::System.Type type) => Type = type;
    public global::System.Type Type {{ get; }}
}}
";

    [Fact]
    public async Task Generator_NoCandidates_AddAttributeUnconditionally()
    {
        // DiagnosticResult[] diagnostics =
        // {
        //     DiagnosticResult.CompilerError("CS7036").WithLocation(0).WithArguments("type", "Roslyn.Generated.EqualityComparerAttribute.EqualityComparerAttribute(System.Type)"),
        //     DiagnosticResult.CompilerError("CS1729").WithLocation(1).WithArguments("Roslyn.Generated.EqualityComparerAttribute", "2"),
        // };

        var code = """
using System;
namespace FunkyMockTestSource;
public class Empty {}
""";
        await VerifyCS.VerifyGeneratorAsync(code,
            DiagnosticResult.EmptyDiagnosticResults
            , ("FunkyAttribute.g.cs", _attributeSrc));
    }

    [Fact]
    public async Task Generator_implement_simple()
    {
        var userSource = """
using System;
using FunkyMock;
namespace FunkyMockTestSource;

public interface ISimple {
    string Text(string value);
}

[Funky(typeof(ISimple))]
public partial class SomeMock {
}
""";

        // NOTE: TABS must be real tabs (a real tab in quotes "	") to string match!
        const string someMockSrc = """
// <auto-generated/>
#nullable enable
namespace FunkyMockTestSource;

// Standard global using
using global::System;
using global::System.Collections.Generic;
using global::System.IO;
using global::System.Linq;
using global::System.Net.Http;
using global::System.Threading;
using global::System.Threading.Tasks;

public partial class SomeMock : FunkyMockTestSource.ISimple
{
    public Func<string, string>? OnText;

    public CallHistory Calls { get; } = new();

    public class CallHistory
    {
        public List<TextArgs> Text { get; } = new();

        public record TextArgs(string value);
    }

    public string Text(string value) {
        Calls.Text.Add(new CallHistory.TextArgs(value));
        if (OnText is null) { throw new System.NotImplementedException("'OnText' has not been assigned"); }
        return OnText(value);
    }
}

""";
        var eol = IndentedStringBuilder.DefaultNewLine;
        try
        {
            // this file is LF (not CRLF) so we need to "normalise" the line ending
            IndentedStringBuilder.DefaultNewLine = "\n";
            await VerifyCS.VerifyGeneratorAsync(userSource,
                DiagnosticResult.EmptyDiagnosticResults
                , new[] {
                    ("FunkyAttribute.g.cs", _attributeSrc),
                    ("SomeMock.g.cs", someMockSrc)
                });
        }
        finally
        {
            IndentedStringBuilder.DefaultNewLine = eol;
        }
    }
}
