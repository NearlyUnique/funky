<Project Sdk="Microsoft.NET.Sdk">

    <PropertyGroup>
        <TargetFramework>netstandard2.0</TargetFramework>
        <ImplicitUsings>enable</ImplicitUsings>
        <RootNamespace>FunkyMock</RootNamespace>
        <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
        <LangVersion>latest</LangVersion>
        <Title>Funky Mock Source Generator</Title>
        <Authors>Adam Straughan</Authors>
        <Description>Add [ Funky( typeof( IAnyInterface ) ] to your partial class and have the mocked class code generated</Description>
        <PackageProjectUrl>https://github.com/NearlyUnique/funky</PackageProjectUrl>
        <RepositoryUrl>https://github.com/NearlyUnique/funky</RepositoryUrl>
        <PackageTags>testing</PackageTags>
        <AssemblyName>FunkyMock</AssemblyName>
    </PropertyGroup>

    <PropertyGroup>
        <IsRoslynComponent>true</IsRoslynComponent>
        <EnforceExtendedAnalyzerRules>true</EnforceExtendedAnalyzerRules>
        <PackageReadmeFile>readme.md</PackageReadmeFile>
    </PropertyGroup>

    <PropertyGroup Condition="'$(TargetFramework)' == 'netstandard2.0'">
        <NoWarn>$(NoWarn);nullable</NoWarn>
    </PropertyGroup>

    <PropertyGroup>
        <IsWindows Condition="'$([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::Windows)))' == 'true'">true</IsWindows>
        <IsOSX Condition="'$([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::OSX)))' == 'true'">true</IsOSX>
        <IsLinux Condition="'$([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::Linux)))' == 'true'">true</IsLinux>
    </PropertyGroup>
    <PropertyGroup Condition="'$(IsWindows)'=='true'">
        <DefineConstants>Windows</DefineConstants>
    </PropertyGroup>
    <PropertyGroup Condition="'$(IsOSX)'=='true'">
        <DefineConstants>OSX</DefineConstants>
    </PropertyGroup>
    <PropertyGroup Condition="'$(IsLinux)'=='true'">
        <DefineConstants>Linux</DefineConstants>
    </PropertyGroup>

    <ItemGroup Condition="'$(TargetFramework)' == 'netstandard2.0'">
        <PackageReference Include="IsExternalInit" Version="1.0.3" PrivateAssets="all" />
        <PackageReference Include="Nullable" Version="1.3.1" PrivateAssets="all" />
        <None Include="..\readme.md" Pack="true" PackagePath="\" />
    </ItemGroup>

    <ItemGroup>
      <PackageReference Include="Microsoft.CodeAnalysis.Analyzers" Version="3.3.4">
        <PrivateAssets>all</PrivateAssets>
        <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
      </PackageReference>
      <PackageReference Include="Microsoft.CodeAnalysis.CSharp" Version="4.4.0" />
        <PackageReference Include="Microsoft.CodeAnalysis.CSharp.Workspaces" Version="4.4.0" />
    </ItemGroup>

    <ItemGroup>
        <None Include="$(OutputPath)\$(AssemblyName).dll" Pack="true" PackagePath="analyzers/dotnet/cs" Visible="false" />
    </ItemGroup>
</Project>
