using Microsoft.CodeAnalysis.Testing;
using Xunit;
using VerifyCS = FunkyGenTests.Verifiers.CSharpSourceGeneratorVerifier<FunkyGen.FunkyGenerator>;

namespace FunkyGenTests;

public class FunkyGenTests
{
    private const string AttributeSrc = @"// <auto-generated/>
#nullable enable
namespace FunkyGen;
[global::System.CodeDom.Compiler.GeneratedCodeAttribute(""FunkyGen"", ""1.0.0.0"")]
[global::System.AttributeUsageAttribute(global::System.AttributeTargets.Class, AllowMultiple = false, Inherited = false)]
internal sealed class FunkyAttribute : global::System.Attribute
{
    public FunkyAttribute(global::System.Type type) => Type = type;
    public global::System.Type Type { get; }
}
";

    [Fact]
    public async Task Generator_NoCandidates_AddAttributeUnconditionally()
    {
        // DiagnosticResult[] diagnostics =
        // {
        //     DiagnosticResult.CompilerError("CS7036").WithLocation(0).WithArguments("type", "Roslyn.Generated.EqualityComparerAttribute.EqualityComparerAttribute(System.Type)"),
        //     DiagnosticResult.CompilerError("CS1729").WithLocation(1).WithArguments("Roslyn.Generated.EqualityComparerAttribute", "2"),
        // };

        var code = """
using System;
namespace FunkyGenTestSource;
public class Empty {}
""";
        await VerifyCS.VerifyGeneratorAsync(code,
            DiagnosticResult.EmptyDiagnosticResults
            , ("FunkyAttribute.g.cs", AttributeSrc));
    }

    [Fact]
    public async Task Generator_implement_simple()
    {
        var code = """
using System;
using FunkyGen;
namespace FunkyGenTestSource;

public interface ISimple {
    string Text(string value);
}

[Funky(typeof(ISimple))]
public partial class SomeMock {}
""";
    // DiagnosticResult[] diagnostics = {
    //         DiagnosticResult.CompilerError("CS0535").WithSpan(6, 33, 6, 40).WithArguments("FunkyGenTestSource.SomeMock", "FunkyGenTestSource.ISimple.Text(string)"),
    //     };

    await VerifyCS.VerifyGeneratorAsync(code,
        DiagnosticResult.EmptyDiagnosticResults
        , ("FunkyAttribute.g.cs", AttributeSrc));
    }
}
